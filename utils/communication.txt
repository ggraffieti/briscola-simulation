/*** GAME SETUP ***/

//Wanna play message from player to referee
wanna_play(from(player1)).

//Team name message from referee to player
team_name("red").

//First turn card distribution from referee to dealer
setup_deck(order([player1, player2, player3, player4])).

//Briscola on the table from dealer to tuple space
briscola(1, "spade").


/*** TURN ***/

//Card distribution from referee to dealer
give_cards(order([player1, player2, player3, player4])).

//Card from dealer to player
card(5, "coppe").

//Turn message from referee to player
your_turn(can_speak(true)).

//Card played tuple from player to tuple space
card_played(card(5, "coppe"), from(player1), team("red")).


/*** CONVERSATION ***/

//Answer reaction (extended form): 
out_s(
	out(answer_companion(team(T),from(AP),A)), 
	(operation,completion),
	(
		in(ask_companion(team(T),from(QP),ask(QR,QS))),
		in(answer_companion(team(T),from(AP),A)),
		out(conversation(team(T),from(QP),to(AP),ask(QR, QS),answer(A)))
	)
).

//Answer Reaction (use this to easily execute in command line)
out_s(out(answer_companion(team(T),from(AP),A)),(operation,completion),(in(ask_companion(team(T),from(QP),ask(QR,QS))),in(answer_companion(team(T),from(AP),A)),out(conversation(team(T),from(QP),to(AP),ask(QR, QS),answer(A))))).

//Ask tuple from player to tuple space:
ask_companion(team("red"), from(player2), ask("carico", "coppe")).

//Answer tuple from player to tuple space:
answer_companion(team("red"), from(player1), true).



